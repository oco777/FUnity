#if UNITY_EDITOR
using System.IO;
using UnityEditor;
using UnityEngine;
using UnityEngine.UIElements;
using FUnity.Runtime.Core;

namespace FUnity.EditorTools
{
    public class GenerateActorUITemplateWindow : EditorWindow
    {
        private string m_TemplateName = "MyActor";
        private string m_Folder = "Assets/FUnity/Generated/UI";
        private string m_PortraitSlot = "portrait";
        private int m_Width = 128;
        private int m_Height = 128;
        private Color m_PrimaryColor = new Color(0.15f, 0.6f, 1f, 1f);
        private bool m_LinkToSelectedActor = true;

        [MenuItem("FUnity/Authoring/Generate Actor UI Template...")]
        public static void Open()
        {
            var w = GetWindow<GenerateActorUITemplateWindow>("Generate Actor UI");
            w.minSize = new Vector2(420, 320);
            w.Show();
        }

        private void OnGUI()
        {
            EditorGUILayout.LabelField("UXML/USS Generator (FUnityProject)", EditorStyles.boldLabel);
            EditorGUILayout.Space();

            m_TemplateName = EditorGUILayout.TextField("Template Name", m_TemplateName);
            m_Folder = EditorGUILayout.TextField("Output Folder", m_Folder);
            m_PortraitSlot = EditorGUILayout.TextField("Portrait Slot Name", m_PortraitSlot);
            m_Width = EditorGUILayout.IntField("Width (px)", m_Width);
            m_Height = EditorGUILayout.IntField("Height (px)", m_Height);
            m_PrimaryColor = EditorGUILayout.ColorField("Primary Color", m_PrimaryColor);
            m_LinkToSelectedActor = EditorGUILayout.Toggle("Link to selected FUnityActorData", m_LinkToSelectedActor);

            EditorGUILayout.Space();
            if (GUILayout.Button("Create UXML/USS and Link"))
            {
                CreateFilesAndLink();
            }
        }

        private void CreateFilesAndLink()
        {
            if (string.IsNullOrEmpty(m_TemplateName))
            {
                EditorUtility.DisplayDialog("Error", "Template Name is required.", "OK");
                return;
            }

            Directory.CreateDirectory(m_Folder);
            var uxmlPath = $"{m_Folder}/{m_TemplateName}.uxml";
            var ussPath  = $"{m_Folder}/{m_TemplateName}.uss";

            // --- Generate USS text ---
            string uss =
                $@"/* {m_TemplateName}.uss — generated by FUnity */
.actor-root {{
    width: {m_Width}px;
    height: {m_Height}px;
    border-radius: 12px;
    background-color: rgba({(int)(m_PrimaryColor.r * 255)},{(int)(m_PrimaryColor.g * 255)},{(int)(m_PrimaryColor.b * 255)},{m_PrimaryColor.a});
    justify-content: center;
    align-items: center;
}}
.actor-portrait {{
    width: 100%;
    height: 100%;
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
    -unity-background-scale-mode: scale-to-fit;
}}
";

            // --- Generate UXML text ---
            string uxml =
                $@"<?xml version=""1.0"" encoding=""utf-8""?>
<ui:UXML xmlns:ui=""UnityEngine.UIElements"" xmlns:uie=""UnityEditor.UIElements"" editor-extension-mode=""False"">
    <!-- {m_TemplateName}.uxml — generated by FUnity -->
    <ui:VisualElement name=""root"" class=""actor-root"">
        <ui:VisualElement name=""{m_PortraitSlot}"" class=""actor-portrait"" />
    </ui:VisualElement>
</ui:UXML>
";

            File.WriteAllText(ussPath, uss);
            File.WriteAllText(uxmlPath, uxml);
            AssetDatabase.ImportAsset(ussPath);
            AssetDatabase.ImportAsset(uxmlPath);

            // Add USS to UXML (UI Builderでの読込に任せる or ランタイムで適用)
            // ここでは ActorData.ElementStyle にもセットするので、ランタイムは ve.styleSheets.Add(ElementStyle) で適用可能。

            // --- Link to FUnityActorData ---
            FUnityActorData targetActor = null;
            if (m_LinkToSelectedActor && Selection.activeObject is FUnityActorData sel)
            {
                targetActor = sel;
            }
            else
            {
                // Create new one under same folder
                targetActor = ScriptableObject.CreateInstance<FUnityActorData>();
                AssetDatabase.CreateAsset(targetActor, $"{m_Folder}/FUnityActorData_{m_TemplateName}.asset");
            }

            var uxmlAsset = AssetDatabase.LoadAssetAtPath<VisualTreeAsset>(uxmlPath);
            var ussAsset  = AssetDatabase.LoadAssetAtPath<StyleSheet>(ussPath);

            var so = new SerializedObject(targetActor);
            so.FindProperty("m_ElementUxml").objectReferenceValue = uxmlAsset;
            so.FindProperty("m_ElementStyle").objectReferenceValue = ussAsset;
            so.ApplyModifiedProperties();

            AssetDatabase.SaveAssets();
            Selection.activeObject = targetActor;

            EditorUtility.DisplayDialog("Success", $"Created:\n{uxmlPath}\n{ussPath}\n\nLinked to: {targetActor.name}", "OK");
            Debug.Log($"✅ Generated {uxmlPath} / {ussPath} and linked to {targetActor.name}");
        }
    }
}
#endif
